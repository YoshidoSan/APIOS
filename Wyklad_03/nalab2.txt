func porownanie(_ letters: [Int], _ password: [Int]) -> [Int] {
    var result = [Int](repeating: 0, count: password.count)
    for i in stride(from: 0, to: password.count, by: 1){ 
        if letters[i] == password[i]{
            result[i] = 1
        }
        else{
            for j in stride(from: 0, to: password.count, by: 1){ 
                if letters[i] == password[j]{
                    result[i] = -1
                }
            }   
        }
    }
    return result
}
    
func generuj_haslo(_ size: Int) -> [Int] {
    var haslo = [Int](repeating: 0, count: size)
    for i in stride(from: 0, to: size, by: 1){
        haslo[i] = Int.random(in: 0...9)
    }
    return haslo
}

func czy_nowe(_ result: [Int]) -> Bool {
    var count = 0
    for i in stride(from: 0, to: result.count, by: 1){ 
        if result[i] == 1{
            count += 1
        }
    }
    if count == result.count{
        return true
    }
    else{
        return false
    }
}
var haslo = [1,2,3,4]
var klawisze1 = [1,2,3,4]
var klawisze2 = [5,6,7,8]
var klawisze3 = [1,3,2,1]
var klawisze4 = [7,4,2,7]
print(porownanie(klawisze1, haslo))
print(porownanie(klawisze2, haslo))
print(porownanie(klawisze3, haslo))
print(porownanie(klawisze4, haslo))

print(generuj_haslo(4))
print(generuj_haslo(4))
print(generuj_haslo(5))

print(czy_nowe([1, 1, 1, 1]))
print(czy_nowe([0, 0, 0, 0]))
print(czy_nowe([1, -1, -1, -1]))
print(czy_nowe([0, -1, -1, 0]))


